bundle common tcpwrappers()
{
    vars:

        any:: 
            "config_dir"            string => "/etc"; 
            "allow"                 string => "$(config_dir)/hosts.allow";
            "deny"                  string => "$(config_dir)/hosts.deny";
            "owner"                 string => "root"; 
            "group"                 string => "root"; 
            "mode"                  string => "0444"; 


            ## Mustache templates
            "template_2_destination" data => parsejson('
                    {
                        "hosts.allow.mustache" : "$(allow)"
                        "hosts.deny.mustache" : "$(deny)"
                    }
                ');

        centos::
            "packages"  data  => parsejson('
                    {
                        "tcp_wrappers" : ""
                    }
                ');
        debian::
            "packages"  data  => parsejson('
                    {
                        "tcpd" : ""
                    }
                ');
}

bundle agent tcpwrappers_autorun()
{
    meta:
        "tags" slist => { "autorun", "template_autorun" };

    methods:
        any::
            "" usebundle => sara_data_autorun("tcpwrappers");
            "" usebundle => tcpwrappers_install();
            "" usebundle => tcpwrappers_surfsara_config();
}

bundle agent tcpwrappers_config()
{
    methods:
        any::
            "" usebundle => sara_data_autorun("tcpwrappers");
            "" usebundle => tcpwrappers_install();
            "" usebundle => tcpwrappers_surfsara_config();
}

bundle agent tcpwrappers_install()
{
    methods:
        "" usebundle =>  sara_install_service_packages("tcpwrappers", "@(tcpwrappers.packages)");
}

bundle agent tcpwrappers_surfsara_config()
{
    vars:
        "tcpwrapper_files" slist => { "$(tcpwrappers.allow)", "$(tcpwrappers.deny)" };

    files:
        "$(tcpwrapper_files)"
            comment => "Must be readable by everyone",
            perms => mog("$(tcpwrappers.mode)", "$(tcpwrappers.owner)", "$(tcpwrappers.group)");

    methods:
            "" usebundle => sara_mustache_autorun("tcpwrappers");
}

@if minimum_version(99.9)
= tcpwrappers =

This bundle will generate these files from mustache templates:
 * /etc/hosts.allow
 * /etc/hosts.deny

If one of the files is changed then the followong ''class'' will be set:
 *  sara_tcpwrappers_etc_hosts_allow
 *  sara_tcpwrappers_etc_hosts_deny

These files will be generated with the aid of mustache templates with json data.
the templates are located in:
 * templates/tcpwrappers/
 * templates/tcpwrappers/json

== Usage ==

The bundle is called with:
 * `"tcpwrappers" usebundle => tcpwrappers_autorun();`

When we do not specifiy any json data files then only `default.json` will be
read. You can specify extra json data file via:
 * def.cf
{{{
#!cf3
    LOGIN_HOSTS::
        "tcpwrappers_json_files" slist => {
            "allow_ssh.json" ,
            "allow_http.json" ,
        };
}}}

The variable must be ''tcpwrappers_json_files'' and with this setup 2 extra json files are being merged.

=== DEBUG ===

If you want to debug these bundle set the `DEBUG_tcpwrappers` class, eg:
 * `-DDEBUG_tcpwrappers

== Mustache setup ==

These variables can be used in the json files:
 * ''allow_all'' :  This host/network may use all services, eg:
{{{
#!json
    "allow_all": [
        { "allow": "10.101.32.0/255.255.255.0", "desc": "ALLOW  admin lan" },
        { "allow": "10.102.19.0/255.255.255.0", "desc": "ALLOW prod lan" }, ....
    ]
}}}

 * ''allow_extra'' : This host/network may use this non standard service
 {{{
#!json
    "allow_extra": [
        { 'service': "pxeconfigd", "allow": "10.101.32.0/255.255.255.0", "desc": "ALLOW admin lan" }, ....
    ]
 }}}

 * ''allow_http'' : This host/network may use http/https service
 {{{
#!json
    "allow_http": [
        { "allow": "10.101.32.0/255.255.255.0", "desc": "ALLOW admin lan" }, ....
    ]
 }}}
 * ''allow_kerberos'' : This host/network may use kerberos service
 {{{
#!json
    "allow_kerberos": [
        { "allow": "10.101.32.0/255.255.255.0", "desc": "ALLOW dmin lan" }, ....
    ]
 }}}
 * ''allow_ldap'' : This host/network may use ldap service
 {{{
#!json
    "allow_ldap": [
        { "allow": "10.101.32.0/255.255.255.0", "desc": "ALLOW admin lan" }, ....
    ]
 }}}
 * ''allow_nfs3'' : This host/network may use nfs service
 {{{
#!json
    "allow_nfs3": [
        { "allow": "10.101.32.0/255.255.255.0", "desc": "ALLOW admin lan" }, ....
    ]
 }}}

 * ''allow_ssh'' : This host/network may use ssh service
 {{{
#!json
    "allow_ssh": [
        { "allow": "10.101.32.0/255.255.255.0", "desc": "ALLOW admin lan" }, ....
    ]
 }}}


== Json files ==

We have define these default json files:
 * default.json : Is always included and 'localhost' is allowed.
 * allow.json : Everything is allowed
 * allow_ssh.json: SSH is allowed from everywhere 
 * allow_http.json: HTTP/HTTPS is allowed from everywhere 

== Def usage == 

Here are some examples how to use it
 * specify tcpwrappers configuration in def.cf:
{{{
#!cf3
vars:
    "tcpwrappers_json_files" slist => { "allow_ssh.json", "allow_http.json" };
}}}
 * specify tcpwrappers configuration in def.json:
{{{
#!json
"vars": {
    "tcpwrappers": {
        "tcpwrappers_json_files" slist => { "allow_ssh.json", "allow_http.json" };
    }  
}  
}}}
 * override allow_ssh setting in def.cf:
{{{
#!cf3
vars:
    "tcpwrappers" data => parsejson( '{ "allow_ssh" : [ {"allow": ... } ] }');
}}}
 * override allow_ssh setting in def.json:
{{{
#!json
    "tcpwrappers" : {
        "allow_ssh": [
            { "allow": "10.101.32.0/255.255.255.0", "desc": "ALLOW admin lan" },
        ]
        ....
    }
}}}
@endif
