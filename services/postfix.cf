bundle common postfix() {
    vars:
        debian::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "bsd-mailx" : "",
                            "postfix" : "",
                            "postfix-ldap" : ""
                        },
                        "purge": {
                            "heirloom-mailx": ""
                        }
                    }
                ');
            "service_name"      string => "postfix";

        debian_6|debian_7|debian_8::
            "daemon_name"       string => "/usr/lib/postfix/master";
        debian_9::
            "daemon_name"       string => "/usr/lib/postfix/sbin/master";

        centos::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "bsd-mailx" : "",
                            "postfix" : ""
                        },
                        "remove": {
                            "heirloom-mailx": ""
                        }
                    }
                ');
            "service_name"      string => "postfix";
            "daemon_name"       string => "/usr/libexec/postfix/master";

        SLES::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "mailx" : "",
                            "postfix" : ""
                        }
                    }
                ');
            "service_name"      string => "postfix";
            "daemon_name"       string => "/usr/lib/postfix/master";

        any::
            "newaliases"        string => "/usr/bin/newaliases";
            "postmap_cmd"       string => "/usr/sbin/postmap";
            "config_dir"        string => "/etc/postfix/";
        
            ## Mustache templates
            "template_2_destination" data => parsejson('
                {
                    "aliases.mustache" : "/etc/aliases",
                    "main.cf.mustache" : "/etc/postfix/main.cf",
                    "master.cf.mustache" : "/etc/postfix/master.cf",
                    "dynamicmaps.cf.mustache" : "/etc/postfix/dynamicmaps.cf",
                    "recipient_canonical.mustache" : "/etc/postfix/recipient_canonical",
                    "header_checks.mustache": "/etc/postfix/header_checks",
                    "transport.mustache": "/etc/postfix/transport"
                }
            ');

        systemd::
            "postfix_restart" string => "$(paths.path[systemctl]) restart $(service_name)";
            "postfix_reload"  string => "$(paths.path[systemctl]) reload $(service_name)";

        !systemd::
            "postfix_restart" string => "$(paths.path[service]) $(service_name) restart";
            "postfix_reload" string => "$(paths.path[service]) $(service_name) reload";
}

bundle agent postfix_autorun()
{
    meta:
        "tags"  slist => { "autorun", "template_postfix" };

    methods:
        any::
            ""  usebundle => sara_data_autorun("postfix");
            ""  usebundle => postfix_install();
            ""  usebundle => postfix_surfsara_config();
            ""  usebundle => postfix_daemons_check();

        POSTFIX_VIRTUAL_MAPS::        
            "" usebundle => postfix_virtual_alias_maps();

}

bundle agent postfix_install()
{
    methods:
        "" usebundle => sara_service_packages("postfix", "@(postfix.packages)"); 
}

bundle agent postfix_daemons_check
{
    processes:
        linux::
            "$(postfix.daemon_name)"
                comment         => "Check if the required daemon is running",
                process_count   => check_range("$(postfix.daemon_name)", "1", "1"),
                process_select  => sara_select_parent_process("1");

    commands:
        linux::
            "$(postfix.postfix_restart)"
                ifvarclass => canonify("$(postfix.daemon_name)_out_of_range");

    reports:
        linux::
            "$(this.bundle): $(postfix.daemon_name) with PPID:1 not running"
                ifvarclass => canonify("$(postfix.daemon_name)_out_of_range");
}

bundle agent postfix_surfsara_config
{
    classes:
        "POSTFIX_NEWALIAS" or => {
            "sara_etc_aliases"
        };

        "POSTFIX_RELOAD" or => {
            "sara_etc_postfix_main_cf",
            "sara_etc_postfix_master_cf",
            "sara_etc_postfix_dynamicmaps_cf",
            "sara_etc_postfix_recipient_canonical",
        };

    files:
        "/etc/postfix/main.cf"
            perms => mog("0644", "root", "root"),
                comment => "Must be readable for all users";

    methods:
        "" usebundle => sara_mustache_autorun("postfix");

    commands:
        POSTFIX_NEWALIAS::
            "$(postfix.newaliases)";

        POSTFIX_RELOAD::
            "$(postfix.postfix_reload)";

        sara_etc_postfix_transport::
            "$(postfix.postmap_cmd) $(postfix.config_dir)/transport"
                comment => "This is a hashed file, so we need to use postmap after a change";
}

bundle agent postfix_virtual_alias_maps()
{
    vars:
        "templates" slist => getindices("sara_data.postfix[virtual_alias_maps]");

    methods:
        "" usebundle => sara_mustache_copy("postfix", "@(postfix_virtual_alias_maps.templates)");
        
    files:
        "$(sara_data.postfix[virtual_alias_maps][$(templates)][dest])"
            create => "true",
            edit_template => "$(def.node_template_dir)/postfix/$(templates)",
            template_method => "mustache",
            template_data => "@(sara_data.postfix[virtual_alias_maps][$(templates)][data])",
            classes => results("namespace", "POSTFIX_$(sara_data.postfix[virtual_alias_maps][$(templates)][dest])");

    reports:
        "$(this.bundle) Template $(templates) : $(sara_data.postfix[virtual_alias_maps][$(templates)][dest])"
             ifvarclass => "DEBUG|DEBUG_postfix|DEBUG_$(this.bundle)";
}

@if minimum_version(99.9)
= POSTFIX =
[source:trunk/cfengine3/config/bundles/postfix.cf source postfix.cf]

This bundle will check and configure postfix for Debian and CentOS. The following
files will be generated from mustache templates:
 * /etc/aliases
 * /etc/postfix/main.cf
 * /etc/postfix/master.cf
 * /etc/postfix/dynamicmaps.cf
 * /etc/postfix/recipient_canonical
 * /etc/postfix/header_checks
 * /etc/postfix/transport

Created by the bundle postfix_virtual_alias_map()

 * /etc/postfix/virtual_alias_maps.cf

If one of the files is changed then the following ''class'' will be set:
 * _etc_aliases
 * _etc_postfix_main_cf
 * _etc_postfix_master_cf
 * _etc_postfix_dynamicmaps_cf
 * _etc_postfix_recipient_canonical
 * _etc_postfix_header_checks
 * _etc_postfix_transport

These files will be generated with the aid of mustache templates with json data.
the templates are located in:
 * templates/postfix/
 * templates/postfix/json

== Usage ==

The usage of the bundle is:
{{{
#!cf3
    "postfix" usebundle => postfix_autorun();
}}}

When we do not specifiy any json data files then only `default.json` will be
read. You can specify extra json data file via:
 * def.cf
{{{
#!cf3
    any::
        "postfix_json_files" slist => { "zimbra.json" };
}}} 

The variable must be ''postfix_json_files'' and with this setup 1 extra json file will be  merged.

=== DEBUG ===

if you want to debug this bundle set the `DEBUG_postfix` class, eg:
 * `-DDEBUG_postfix,RUN`

=== Setup ===
The variables that are set in default.json and can be overwritten. SURFSARA use other defaults.
{{{
#!json
{
    "alias_root_email_address": ""example@$(sys.domain)"",
    "alias_database": [
        "hash:/etc/aliases"
    ],
    "alias_maps": [
        "hash:/etc/aliases"
    ],
    "append_dot_mydomain": "no",
    "biff": "no",
    "debugger_command": "",
    "empty_address_recipient": "devnull",
    "file_aliases_lines": [
    ],
    "file_header_checks_lines": [
    ],
    "file_transport_lines": [
    ],
    "header_checks": [
        "regexp:/etc/postfix/header_checks"
    ],
    "inet_interfaces": "loopback-only",
    "inet_protocols": "ipv4",
    "mailman_destination_recipient_limit": false,
    "master_cf_extra_interfaces": [
    ],
    "message_size_limit": 10240000,
    "mydestination": [
        "$myhostname",  "localhost.$mydomain", "localhost", ".$mydomain"
    ],
    "mydomain": "$(sys.domain)",
    "mynetworks": [
        "127.0.0.0/8"
    ],
    "myorigin": "$myhostname",
    "myhostname": "$(sys.fqhost)",
    "recipient_delimiter": "+",
    "recipient_canonical_maps": [
        "hash:/etc/postfix/recipient_canonical"
    ],
    "relay_domains": [
        "$mydestination"
    ],
    "relayhost": "[mta.surfsara.nl]",
    "smtpd_banner": "SURFsara ESMTP host",
    "smtpd_port": "smtp",
    "transport_maps": [
        "hash:/etc/postfix/transport"
    ],
    "unknown_local_recipient_reject_code": 550,
    "virtual_alias_maps": [
        {
            "protocol" : "",
            "delimiter" : "",
            "dest" : ""
        }
    ],
    "virtual_mailbox_limit": 0
}
}}}

=== Usage  ===

The following must be set in the specific ''def.json'' hostfile
{{{
#!json
    "classes": {
        "POSTFIX_BUNDLE": "any",
    },  
}}} 

Here are some examples how to use it:
 * specify postfix configuration in def.cf:
{{{
#!cf3
vars:
    "postfix_json_files" slist => { "zimbra.json" };
}}} 
 * Set/Override options variable in ''def.json'':
{{{
#!json
        "postfix" : {
            "alias_root_email_address": "noreply@surfsara.nl",
            "json_files": [ "zimbra.json" ],
            "file_aliases_lines": [ {"name": "beowulf", "value": "|\"/usr/bin/run_email2trac --project beowulf\""} ]
        },  
}}}     
 * override server setting in def.cf
{{{
#!cf3
vars:
    "postfix" data => parsejson( '{ "alias_root_email_address":  "file_aliases_lines"  }' );
}}} 

 * to use `virtual_alias_map`s override following and define your own mustache file 
{{{
#!json
    "virtual_alias_maps": [
        {
            "protocol" : "",
            "delimiter" : "",
            "dest" : ""
        }
    ],
}}}

 * enable VIRTUAL_MAPS class and describe your json file, for example:
  * VIRTUAL_MAPS will enable virtual_alias_maps in main.cf of postfix
{{{
{{#classes.POSTFIX_VIRTUAL_MAPS}}
{{#vars.sara_data.postfix.virtual_alias_maps}}virtual_alias_maps = {{{protocol}}}{{{delimiter}}}{{{dest}}}, {{/vars.sara_data.postfix.virtual_alias_map}}
{{/classes.POSTFIX_VIRTUAL_MAPS}}
}}}

 * Json data file. Postfix bundle will copy the `ldap_aliases_map.mustache` template file and expand it with teh defined data.
{{{
#!json
    "classes" : {
        "VIRTUAL_MAPS": [ "mta.example.com" ],:
    },
    "virtual_alias_maps": {
        "ldap_aliases_map.mustache" : {
            "delimiter": ":",
            "dest": "/etc/postfix/virtual_alias_maps.cf",
            "protocol": "ldap",
            "data": {
                "bind" : true,
                "bind_options" : {
                    "dn" : "<your_dn>",
                    "pw" : "<your_bind_password>"
                },
                "port": "636",
                "query_filter" : "(uid=%s)",
                "result_attribute" : "mail",
                "search_base" : "ou=Users,dc=example,dc=com",
                "server": "ldaps://ldap.example.com"
            }
        }
    }
}}}

{{{
#!cf3
vars:
    "postfix" data => parsejson( '{ "alias_root_email_address":  "file_aliases_lines"  }' );
}}} 

@endif
