#################################################
#
# SVN info:
#       $Id: resolv.cf 23776 2017-08-04 13:47:27Z bas $

bundle common resolv
{
    vars:

        any::
            ## part 1 new setup (required part for new setup)
            "config_file"       string => "/etc/resolv.conf";
            "owner"             string => "root";
            "group"             string => "root";
            "mode"              string => "0644";

            "template_2_destination" data => parsejson('
                                    {
                                        "resolv.conf.mustache": "$(resolv.config_file)"
                                    }
                               ');
}

bundle agent resolv_autorun()
{
    meta:
        "tags" slist => { "autorun", "template_resolv" };

    methods:
        any::
            "" usebundle => resolv_surfsara_config();
}

bundle agent resolv_surfsara_config()
{
    methods:
        any::
            "" usebundle => sara_template_autorun("resolv");

    files:
        any::
            "$(resolv.config_file)"
                perms => mog("$(resolv.mode)", "$(resolv.owner)", "$(resolv.group)");
}

@if minimum_version(99.9)

= resolv =
[source:trunk/cfengine3/config/bundles/resolv.cf source resolv.cf]

This bundle will generate these/this file(s) from mustache templates:
 * /etc/resolv.conf

If one of the files is changed then the following ""class"" will be set:
 * sara_etc_resolv_conf

These templates are located in:
 * templates/resolv
 * templates/resolv/json

== Usage ==

The bundle is called with:
 * `"resolv" usebundle => resolv_autorun();`

Please note: to use the new setup of the bundle, please add the machine(s) to the class RESOLV_BUNDLE

When we do not specifiy any json data files then only `default.json` will be
read. You can specify extra json data file via:
 * def.cf
{{{
#!cf3
    any::
        "resolv_json_files" slist => { "cua.json" };
}}}

The variable must be ""resolv_json_files"" and with this setup 1 extra json file will be merged.


=== DEBUG ===

if you want to debug this bundle set the `DEBUG_resolv` class, eg:
 * `DDEBUG_resolv,RUN`

=== Setup ===
The variables are set in default.json and can be overwritten.
{{{
#!json
{
    "domain": "surfsara.nl",
    "nameservers": [
        { "ip": "145.100.29.146", "desc": "ns1.surfsara.nl"},
        { "ip": "145.100.29.131", "desc": "ns2.surfsara.nl"},
    ],
    "options": [
        "ndots:1"
    ],
    "search": [
        { "domain": "surfsara.nl" },
        { "domain": "sara.nl" },
    ]
}
}}}

=== Def usage ===

The following must be set in the specific ''def.json'' hostfile
{{{
#!json
    "classes": {
        "RESOLV_BUNDLE": "any",
    },
}}}

Here are some examples how to use it:
 * specify resolv configuration in def.cf:
{{{
#!cf3
vars:
    "resolv_json_files" slist => { "cua.json" };
}}}

 * override config settings in def.cf
{{{
#!cf3
vars:
    "resolv" data => parsejson( '"options":[ "ndots:2" ]' );
}}}

 * override config settings in <host>.json
{{{
#!json
    "vars": {
        "resolv": {
            "json_files": [ "search_mail.json" ]
        }
    }
}}}

 * override variable config setting in <host>.json
{{{
#!json
    "resolv": {
        "search": [
            { "domain": "ia.surfsara.nl" }
        ]
    }
}}}

@endif
